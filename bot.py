import re
from datetime import datetime, timedelta
import gspread
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from oauth2client.service_account import ServiceAccountCredentials
import asyncio
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import logging
import os
import sys

def setup_logging():
    logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] %(message)s",
    stream=sys.stdout  # <-- –≠—Ç–æ –≤–∞–∂–Ω–æ!
    )
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
    logging.getLogger('aiogram').setLevel(logging.WARNING)
    logging.getLogger('asyncio').setLevel(logging.WARNING)
    logging.getLogger('apscheduler').setLevel(logging.WARNING)

# –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
setup_logging()
logger = logging.getLogger(__name__)

def log_event(event_type: str, user_data: dict = None, details: str = ""):
    org_info = ""
    if user_data:
        org_info = f" | –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user_data.get('org', 'N/A')} ({user_data.get('name', 'N/A')})"
    logger.info(f"{event_type}{org_info} | {details}")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
REG_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]],
    resize_keyboard=True
)

MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì® –ù–∞–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ")]],
    resize_keyboard=True
)

METALS_KB_WITH_CANCEL = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–æ–ª–æ—Ç–æ"), KeyboardButton(text="–°–µ—Ä–µ–±—Ä–æ")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)

METALS_KB_NO_CANCEL = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–æ–ª–æ—Ç–æ"), KeyboardButton(text="–°–µ—Ä–µ–±—Ä–æ")]
    ],
    resize_keyboard=True
)

CANCEL_ONLY_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

SKIP_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å")]],
    resize_keyboard=True
)

NOTIFICATION_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìà –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")],
        [KeyboardButton(text="üö´ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")]
    ],
    resize_keyboard=True
)

ORG_TYPE_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ë–∞–Ω–∫ –†–§")],
        [KeyboardButton(text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤ –†–§")],
        [KeyboardButton(text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ï–ê–≠–°")],
        [KeyboardButton(text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤–Ω–µ –ï–ê–≠–°")]
    ],
    resize_keyboard=True
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = "7776660810:AAE4YZm4JkZYsUdWZcngEdwz0SajINcgTas"
GOOGLE_SHEET_NAME = "–î–∞–Ω–Ω—ã–µ –∏–∑ –±–æ—Ç–∞"
CREDENTIALS_FILE = "credentials.json"
SHEET_NAME = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
chat_id = '-4787764944'
active_timers = {}
MAX_MESSAGE_AGE = timedelta(minutes=2)
NOTIFICATION_COLUMN = 7

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
gc = gspread.authorize(credentials)
users_sheet = gc.open(GOOGLE_SHEET_NAME).worksheet(SHEET_NAME)
offers_sheet = gc.open(GOOGLE_SHEET_NAME).worksheet("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ")
requests_sheet = gc.open(GOOGLE_SHEET_NAME).worksheet("–ó–∞–ø—Ä–æ—Å")
gold_sheet = gc.open(GOOGLE_SHEET_NAME).worksheet("–ó–æ–ª–æ—Ç–æ")
silver_sheet = gc.open(GOOGLE_SHEET_NAME).worksheet("–°–µ—Ä–µ–±—Ä–æ")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class Form(StatesGroup):
    name = State()
    organization = State()
    org_type = State() 
    contacts = State()
    offer_metal = State()
    offer_quantity = State()
    offer_quote = State()
    quote_metal = State()
    quote_value = State()
    quote_second_metal = State()
    deadline = State()
    
    @classmethod
    def timeout(cls):
        return timedelta(minutes=30)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# NEW: –ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.update.middleware()
async def check_message_age_middleware(handler, event, data):
    if isinstance(event, types.Message):
        message_time = event.date.replace(tzinfo=None)
        if (datetime.now() - message_time) > MAX_MESSAGE_AGE:
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.from_user.id}")
            return
    return await handler(event, data)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_user(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ ID Telegram"""
    records = users_sheet.get_all_records()
    for user in records:
        if str(user["ID Telegram"]) == str(user_id):
            return {
                "name": user["–ò–º—è"],
                "org": user["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"],
                "org_type": user["–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"]
            }
    return None

def is_registered(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    return get_user(user_id) is not None
    
async def check_session_expired(chat_id: int, user_id: int) -> bool:
    state = dp.fsm.resolve_context(bot, chat_id=chat_id, user_id=user_id)
    data = await state.get_data()
    
    if not data.get('deadline'):
        return False
    
    if datetime.now() > data['deadline']:
        if user_id in active_timers:
            active_timers[user_id].cancel()
            del active_timers[user_id]
        await state.clear()
        return True
    return False
    
async def send_timeout_notification(user_id: int, deadline: datetime):
    user_data = get_user(user_id)
    try:
        now = datetime.now()
        wait_seconds = (deadline - now).total_seconds()

        if wait_seconds > 0:
            await asyncio.sleep(wait_seconds)

        if user_id not in active_timers:
            return

        state = dp.fsm.resolve_context(bot, chat_id=user_id, user_id=user_id)
        data = await state.get_data()

        if data.get('deadline') == deadline:
            if not user_data:
                return
                
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            
            if 'quote_value' not in data:
                gold_sheet.append_row([user_id, user_data["name"], user_data["org"], user_data["org_type"], timestamp, "–í—Ä–µ–º—è –≤—ã—à–ª–æ"])
                silver_sheet.append_row([user_id, user_data["name"], user_data["org"], user_data["org_type"], timestamp, "–í—Ä–µ–º—è –≤—ã—à–ª–æ"])
                log_event("QUOTE", user_data, "–í—Ä–µ–º—è –≤—ã—à–ª–æ | –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")
            
            elif 'quote_value' in data and 'second_metal' not in data:
                second_metal = "–°–µ—Ä–µ–±—Ä–æ" if data['metal'] == "–ó–æ–ª–æ—Ç–æ" else "–ó–æ–ª–æ—Ç–æ"
                if second_metal == "–ó–æ–ª–æ—Ç–æ":
                    gold_sheet.append_row([user_id, user_data["name"], user_data["org"], user_data["org_type"], timestamp, "–í—Ä–µ–º—è –≤—ã—à–ª–æ"])
                else:
                    silver_sheet.append_row([user_id, user_data["name"], user_data["org"], user_data["org_type"], timestamp, "–í—Ä–µ–º—è –≤—ã—à–ª–æ"])
                log_event("QUOTE", user_data, f"–í—Ä–µ–º—è –≤—ã—à–ª–æ | –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è {data['metal']}")
            
            elif 'second_metal' in data and 'second_quote' not in data:
                second_metal = data['second_metal']
                if second_metal == "–ó–æ–ª–æ—Ç–æ":
                    gold_sheet.append_row([user_id, user_data["name"], user_data["org"], user_data["org_type"], timestamp, "–í—Ä–µ–º—è –≤—ã—à–ª–æ"])
                else:
                    silver_sheet.append_row([user_id, user_data["name"], user_data["org"], user_data["org_type"], timestamp, "–í—Ä–µ–º—è –≤—ã—à–ª–æ"])
                log_event("QUOTE", user_data, f"–í—Ä–µ–º—è –≤—ã—à–ª–æ | –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è {second_metal}")
            
            await bot.send_message(
                chat_id=user_id,
                text="‚åõ –í—Ä–µ–º—è –≤—ã—à–ª–æ!",
                reply_markup=MAIN_KB
            )
            await clear_state_safely(user_id, state)
            
    except asyncio.CancelledError:
        log_event("QUOTE", user_data, "–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
    except Exception as e:
        log_event("ERROR", None, f"–û—à–∏–±–∫–∞ –≤ send_timeout_notification: {e}")
    finally:
        if user_id in active_timers:
            del active_timers[user_id]
    
def record_decline(user_id: int):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—ã"""
    user_data = get_user(user_id)
    if not user_data:
        return False
    
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    # –ó–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç "–ó–æ–ª–æ—Ç–æ"
    gold_sheet.append_row([
        user_id,
        user_data["name"],
        user_data["org"],
        user_data["org_type"],
        timestamp,
        "–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"
    ])
    
    # –ó–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç "–°–µ—Ä–µ–±—Ä–æ"
    silver_sheet.append_row([
        user_id,
        user_data["name"],
        user_data["org"],
        user_data["org_type"],
        timestamp,
        "–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"
    ])
    
    return True  

async def clear_state_safely(user_id: int, state: FSMContext):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –æ—Ç–º–µ–Ω–æ–π —Ç–∞–π–º–µ—Ä–∞"""
    try:
        if user_id in active_timers:
            active_timers[user_id].cancel()
            del active_timers[user_id]
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {user_id}: {e}")
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏   

def record_quote(user_id: int, metal: str, quote: float):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç"""
    user_data = get_user(user_id)
    if not user_data:
        return False
    
    sheet = gold_sheet if metal == "–ó–æ–ª–æ—Ç–æ" else silver_sheet
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    sheet.append_row([
        user_id,
        user_data["name"],
        user_data["org"],
        user_data["org_type"],
        timestamp,
        quote
    ])
    
    return True

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
def validate_name(text: str) -> tuple[bool, str]:
    text = text.strip()
    if len(text) < 3 or len(text) > 25:
        return False, "–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤"
    if not re.fullmatch(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s-]+$', text):
        return False, "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å"
    return True, ""

def validate_org(text: str) -> tuple[bool, str]:
    text = text.strip()
    if len(text) < 3 or len(text) > 25:
        return False, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤"
    if not re.fullmatch(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9\s\.,!?:;\-\'"]+$', text):
        return False, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏"
    return True, ""

def validate_contacts(text: str) -> tuple[bool, str]:
    if text == "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å":
        return True, ""
    text = text.strip()
    if len(text) < 3 or len(text) > 25:
        return False, "–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤"
    return True, ""

def validate_quote(text: str) -> tuple[bool, str]:
    try:
        quote = float(text.replace(",", "."))
        if not -100 <= quote <= 100:
            return False, "–ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É -100 –∏ 100"
        return True, ""
    except ValueError:
        return False, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,5 –∏–ª–∏ -0,5)"

async def send_scheduled_notifications():
    try:
        msk_timezone = pytz.timezone('Europe/Moscow')
        now = datetime.now(msk_timezone)
        current_time = now.strftime("%H:%M")

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ {now.strftime('%H:%M:%S')}")

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            times = []
            for record in requests_sheet.get_all_records():
                send_time_str = record.get("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –ú–°–ö")
                if send_time_str:
                    try:
                        send_time = datetime.strptime(send_time_str.strip(), "%H:%M").replace(
                            year=now.year, month=now.month, day=now.day, tzinfo=msk_timezone)
                        if send_time > now:
                            times.append(send_time)
                    except ValueError:
                        continue
            if times:
                nearest = min(times)
                delta = nearest - now
                logger.info(f"–ë–ª–∏–∂–∞–π—à–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {nearest.strftime('%H:%M:%S')}")
            else:
                logger.info("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")

        records = requests_sheet.get_all_records()
        for record in records:
            if not record.get("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –ú–°–ö"):
                continue

            if record["–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –ú–°–ö"].strip() == current_time:
                response_time = int(record.get("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", 15))
                users_data = users_sheet.get_all_values()
                header = users_data[0]

                try:
                    user_id_index = header.index("ID Telegram")
                    notify_index = header.index("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                except ValueError as e:
                    log_event("ERROR", None, f"–°—Ç–æ–ª–±–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö: {header}")
                    continue

                users_to_notify = [
                    row[user_id_index] for row in users_data[1:]
                    if len(row) > notify_index and row[notify_index].strip().capitalize() == "–î–∞"
                ]

                for user_id in users_to_notify:
                    try:
                        user_id = int(user_id)
                        state = dp.fsm.resolve_context(bot, chat_id=user_id, user_id=user_id)

                        if user_id in active_timers:
                            active_timers[user_id].cancel()

                        deadline = datetime.now() + timedelta(minutes=response_time)
                        await state.update_data(
                            notification_time=datetime.now(),
                            deadline=deadline
                        )

                        task = asyncio.create_task(
                            send_timeout_notification(user_id, deadline)
                        )
                        active_timers[user_id] = task

                        user_data = get_user(user_id)
                        if user_data:
                            log_event("NOTIFY", user_data,
                                      f"–¢–µ–∫—Å—Ç: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ | –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time} –º–∏–Ω")

                        await bot.send_message(
                            chat_id=user_id,
                            text=f"{record['–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'].strip()}\n\n‚è± –ù–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –¥–∞—ë—Ç—Å—è {response_time} –º–∏–Ω—É—Ç",
                            reply_markup=NOTIFICATION_KB
                        )
                    except Exception as e:
                        log_event("ERROR", None, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ user_id={user_id}: {e}")
    except Exception as e:
        log_event("ERROR", None, f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if is_registered(message.from_user.id):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_KB)
    else:
        await message.answer(
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:",
            reply_markup=REG_KB
        )

@dp.message(lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_registration(message: types.Message, state: FSMContext):
    if is_registered(message.from_user.id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=MAIN_KB)
        return
    await state.set_state(Form.name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å, 3-25 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    is_valid, error_msg = validate_name(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=types.ReplyKeyboardRemove())
        return
    await state.update_data(name=message.text.strip())
    await state.set_state(Form.organization)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (3-25 —Å–∏–º–≤–æ–ª–æ–≤, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è):",
        reply_markup=types.ReplyKeyboardRemove()
    )


@dp.message(Form.organization)
async def process_org(message: types.Message, state: FSMContext):
    is_valid, error_msg = validate_org(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=types.ReplyKeyboardRemove())
        return
    
    await state.update_data(organization=message.text.strip())
    await state.set_state(Form.org_type)  # NEW: –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –í–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:",
        reply_markup=ORG_TYPE_KB
    )

@dp.message(Form.org_type)
async def process_org_type(message: types.Message, state: FSMContext):
    org_types = ["–ë–∞–Ω–∫ –†–§", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤ –†–§", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ï–ê–≠–°", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤–Ω–µ –ï–ê–≠–°"]
    
    if message.text not in org_types:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –í–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        return
    
    await state.update_data(org_type=message.text)
    await state.set_state(Form.contacts)
    await message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω/–ø–æ—á—Ç–∞) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å¬ª:",
        reply_markup=SKIP_KB  
    )

@dp.message(Form.contacts)
# –í process_contacts (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
async def process_contacts(message: types.Message, state: FSMContext):
  try:
    if message.text == "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å":
        contacts = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    else:
        is_valid, error_msg = validate_contacts(message.text)
        if not is_valid:
            await message.answer(
                f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å¬ª:",
                reply_markup=SKIP_KB
            )
            return
        contacts = message.text.strip()

    data = await state.get_data()
    users_sheet.append_row([
        datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
        message.from_user.id,
        data['name'],
        data['organization'],
        contacts,
        data['org_type'],
        "–î–∞"
    ])
    
    user_data = {
        "name": data['name'],
        "org": data['organization'],
        "org_type": data['org_type']
    }
    log_event("REGISTER", user_data, "–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    await clear_state_safely(message.from_user.id, state)
    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –æ –ø–æ–∫—É–ø–∫–µ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤ –∏, –ø–æ –∂–µ–ª–∞–Ω–∏—é, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏! –ñ–µ–ª–∞–µ–º –í–∞–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!", reply_markup=MAIN_KB)
  except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_contacts: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ---

@dp.message(lambda message: message.text == "üì® –ù–∞–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ")
async def start_offer(message: types.Message, state: FSMContext):
    if not is_registered(message.from_user.id):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=REG_KB)
        return
    
    user_data = get_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    await state.set_state(Form.offer_metal)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–µ—Ç–∞–ª–ª:",
        reply_markup=METALS_KB_WITH_CANCEL
    )

async def cancel_offer(message: types.Message, state: FSMContext):
    await clear_state_safely(message.from_user.id, state)
    await message.answer(
        "‚ùå –û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –•–æ—Ä–æ—à–µ–≥–æ –í–∞–º –¥–Ω—è",
        reply_markup=MAIN_KB
    )

@dp.message(Form.offer_metal)
async def process_offer_metal(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_offer(message, state)
        return
        
    if message.text not in ["–ó–æ–ª–æ—Ç–æ", "–°–µ—Ä–µ–±—Ä–æ"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=METALS_KB)
        return
    
    await state.update_data(metal=message.text)
    await state.set_state(Form.offer_quantity)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–∞—Å—Å—É –ø–∞—Ä—Ç–∏–∏ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>100</code>):",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="HTML"
    )

@dp.message(Form.offer_quantity)
async def process_offer_quantity(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_offer(message, state)
        return
    
    try:
        quantity = float(message.text.replace(",", "."))
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>3.5</code>",
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode="HTML"
        )
        return
    
    await state.update_data(quantity=quantity)
    await state.set_state(Form.offer_quote)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ç–∏—Ä–æ–≤–∫—É –≤ % (–≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–º–∏–∏ —á–∏—Å–ª–æ –±–µ–∑ –∑–Ω–∞–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1.5</code> , –∞ –≤ —Å–ª—É—á–∞–µ –¥–∏—Å–∫–æ–Ω—Ç–∞ —á–∏—Å–ª–æ —Å–æ –∑–Ω–∞–∫–æ–º - : <code>-0.5</code>):",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="HTML"
    )

@dp.message(Form.offer_quote)
async def process_offer_quote(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_offer(message, state)
        return
    
    is_valid, error_msg = validate_quote(message.text)
    if not is_valid:
        await message.answer(
            f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    quote = float(message.text.replace(",", "."))
    data = await state.get_data()
    user_data = get_user(message.from_user.id)
    
    if not user_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets
    records = users_sheet.get_all_records()
    contacts = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    for user in records:
        if str(user["ID Telegram"]) == str(message.from_user.id):
            contacts = user.get("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–ù–µ —É–∫–∞–∑–∞–Ω—ã")
            break
    
    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    offers_sheet.append_row([
        message.from_user.id,
        user_data["name"],
        user_data["org"],
        user_data["org_type"],
        datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
        data['metal'],
        data['quantity'],
        quote
    ])
    
    log_event("OFFER", user_data, 
              f"–ú–µ—Ç–∞–ª–ª: {data['metal']} | –ú–∞—Å—Å–∞: {data['quantity']}–∫–≥ | –ö–æ—Ç–∏—Ä–æ–≤–∫–∞: {quote}%")
    
    await state.clear()
    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ:\n"
        f"‚Ä¢ –ú–µ—Ç–∞–ª–ª: {data['metal']}\n"
        f"‚Ä¢ –ú–∞—Å—Å–∞: {data['quantity']} –∫–≥\n"
        f"‚Ä¢ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞: {quote}%",
        reply_markup=MAIN_KB
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=f"üì® –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ:\n"
                 f"‚Ä¢ –û—Ç: {user_data['org']} ({user_data['name']})\n"
                 f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts}\n"
                 f"‚Ä¢ –ú–µ—Ç–∞–ª–ª: {data['metal']}\n"
                 f"‚Ä¢ –ú–∞—Å—Å–∞: {data['quantity']} –∫–≥\n"
                 f"‚Ä¢ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞: {quote}%",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

@dp.message(lambda message: message.text == "üìà –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")
async def start_quotes(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    if await check_session_expired(
        chat_id=message.chat.id,
        user_id=message.from_user.id
    ):
        await message.answer("‚åõ –í—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤—ã—à–ª–æ!", reply_markup=MAIN_KB)
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–≤—ã–π –º–µ—Ç–∞–ª–ª –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫. –ö–æ—Ç–∏—Ä–æ–≤–∫—É –ø–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Ç–∞–ª–ª—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ:",
        reply_markup=METALS_KB_NO_CANCEL
    )
    await state.set_state(Form.quote_metal)

@dp.message(lambda message: message.text == "üö´ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")
async def handle_decline(message: types.Message, state: FSMContext):
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if message.from_user.id in active_timers:
        active_timers[message.from_user.id].cancel()
        del active_timers[message.from_user.id]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü—ã
    if not record_decline(message.from_user.id):
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await clear_state_safely(message.from_user.id, state)
    
    await message.answer(
        "–û—á–µ–Ω—å –∂–∞–ª—å! –ñ–µ–ª–∞–µ–º –í–∞–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
        reply_markup=MAIN_KB
    )
    
@dp.message(Form.quote_metal)
async def process_quote_metal(message: types.Message, state: FSMContext):
    if await check_session_expired(message.chat.id, message.from_user.id):
        await message.answer("‚åõ –í—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤—ã—à–ª–æ!", reply_markup=MAIN_KB)
        return
        
    if message.text not in ["–ó–æ–ª–æ—Ç–æ", "–°–µ—Ä–µ–±—Ä–æ"]:  # –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ "–û—Ç–º–µ–Ω—É"
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫!", reply_markup=METALS_KB_NO_CANCEL)
        return
        
    if message.text not in ["–ó–æ–ª–æ—Ç–æ", "–°–µ—Ä–µ–±—Ä–æ"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫!", reply_markup=METALS_KB)
        return
    
    await state.update_data(metal=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ç–∏—Ä–æ–≤–∫—É –≤ % (–≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–º–∏–∏ —á–∏—Å–ª–æ –±–µ–∑ –∑–Ω–∞–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1.5</code>, –∞ –≤ —Å–ª—É—á–∞–µ –¥–∏—Å–∫–æ–Ω—Ç–∞ —á–∏—Å–ª–æ —Å–æ –∑–Ω–∞–∫–æ–º - : <code>-0.5</code>):",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(Form.quote_value)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@dp.message(Form.quote_value)
async def process_quote_value(message: types.Message, state: FSMContext):
    if await check_session_expired(chat_id=message.chat.id, user_id=message.from_user.id):
        await message.answer("‚åõ –í—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤—ã—à–ª–æ!", reply_markup=MAIN_KB)
        return
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_offer(message, state)
        return
    
    is_valid, error_msg = validate_quote(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=types.ReplyKeyboardRemove())
        return
    
    quote = float(message.text.replace(",", "."))
    data = await state.get_data()
    user_data = get_user(message.from_user.id)
    
    current_metal = data['metal']
    if user_data:
        log_event("QUOTE", user_data, f"–ú–µ—Ç–∞–ª–ª: {current_metal} | {quote}%")
    
    if current_metal == "–ó–æ–ª–æ—Ç–æ":
        gold_sheet.append_row([
            message.from_user.id,
            user_data["name"],
            user_data["org"],
            user_data["org_type"],
            datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
            quote
        ])
        await state.update_data(gold_recorded=True)
    else:
        silver_sheet.append_row([
            message.from_user.id,
            user_data["name"],
            user_data["org"],
            user_data["org_type"],
            datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
            quote
        ])
        await state.update_data(silver_recorded=True)
    
    await state.update_data(quote_value=quote)
    
    if 'second_metal' not in data:
        second_metal = "–°–µ—Ä–µ–±—Ä–æ" if current_metal == "–ó–æ–ª–æ—Ç–æ" else "–ó–æ–ª–æ—Ç–æ"
        await state.update_data(second_metal=second_metal)
        
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ, –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ {current_metal} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
            f"–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É –Ω–∞ {second_metal}?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.quote_second_metal)
    else:
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –û–±–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –•–æ—Ä–æ—à–µ–≥–æ –í–∞–º –¥–Ω—è!", reply_markup=MAIN_KB)
        await clear_state_safely(message.from_user.id, state)

@dp.message(Form.quote_second_metal)
async def process_second_metal(message: types.Message, state: FSMContext):
    if await check_session_expired(chat_id=message.chat.id, user_id=message.from_user.id):
        await message.answer("‚åõ –í—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤—ã—à–ª–æ!", reply_markup=MAIN_KB)
        return
    
    data = await state.get_data()
    second_metal = data.get('second_metal')
    user_data = get_user(message.from_user.id)
    
    if message.text == "–ù–µ—Ç":
        if user_data:
            log_event("QUOTE", user_data, f"–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è {second_metal}")
        
        if second_metal == "–ó–æ–ª–æ—Ç–æ":
            gold_sheet.append_row([
                message.from_user.id,
                user_data["name"],
                user_data["org"],
                user_data["org_type"],
                datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                "–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"
            ])
        else:
            silver_sheet.append_row([
                message.from_user.id,
                user_data["name"],
                user_data["org"],
                user_data["org_type"],
                datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                "–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"
            ])
        
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É! –ñ–µ–ª–∞–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
            reply_markup=MAIN_KB
        )
        await clear_state_safely(message.from_user.id, state)
        return
    
    if message.text != "–î–∞":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
        return
    
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è {second_metal} –≤ %:",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.update_data(metal=second_metal)
    await state.set_state(Form.quote_value)
    
# --- –ó–∞–ø—É—Å–∫ ---
async def on_startup(bot: Bot):
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω, —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ")
    
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
    if not os.path.exists("bot.log"):
        with open("bot.log", "w") as f:
            f.write("")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
    try:
        test_data = users_sheet.get_all_records()
        log_event("SYSTEM", None, f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(test_data)}")
    except Exception as e:
        log_event("ERROR", None, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets: {e}")
        return
    
    log_event("SYSTEM", None, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

async def health_check():
    while True:
        logger.info("–ë–æ—Ç –∂–∏–≤‚Ä¶")
        await asyncio.sleep(5 * 60)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

async def main():
    await on_startup(bot)

    # –ó–∞–ø—É—Å–∫–∞–µ–º health_check
    asyncio.create_task(health_check())

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(
        send_scheduled_notifications,
        trigger=CronTrigger(minute="*"),
    )
    scheduler.start()

    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())