import re
from datetime import datetime, timedelta, time
import holidays
import gspread
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from oauth2client.service_account import ServiceAccountCredentials
import asyncio
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import logging
import os
import sys

RU_HOLIDAYS = holidays.RU(years=[2025,2026,2027])  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω—É–∂–Ω—ã–µ –≥–æ–¥–∞

def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format="[%(asctime)s] %(message)s",
        filename="bot.log",
        filemode="a",
        encoding="utf-8"
    )
    # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –ª–æ–≥–∏ –∏ –≤ –∫–æ–Ω—Å–æ–ª–∏:
    console = logging.StreamHandler(sys.stdout)
    console.setLevel(logging.INFO)
    formatter = logging.Formatter("[%(asctime)s] %(message)s")
    console.setFormatter(formatter)
    logging.getLogger().addHandler(console)

    logging.getLogger('aiogram').setLevel(logging.WARNING)
    logging.getLogger('asyncio').setLevel(logging.WARNING)
    logging.getLogger('apscheduler').setLevel(logging.WARNING)

setup_logging()
logger = logging.getLogger(__name__)

def log_event(event_type: str, user_data: dict = None, details: str = ""):
    org_info = ""
    if user_data:
        org_info = f" | –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user_data.get('org', 'N/A')} ({user_data.get('name', 'N/A')})"
    logger.info(f"{event_type}{org_info} | {details}")

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def get_main_inline_kb(offers_allowed=True):
    kb = []
    if offers_allowed:
        kb.append([InlineKeyboardButton(text="üì® –ù–∞–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ", callback_data="start_offer")])
    kb.append([InlineKeyboardButton(text="üí¨ –ü–æ–º–æ—â—å", callback_data="help_menu")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def get_reg_inline_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration")]
        ]
    )

def get_metals_inline_kb(with_cancel=True):
    kb = [
        [InlineKeyboardButton(text="–ó–æ–ª–æ—Ç–æ", callback_data="metal_gold"), InlineKeyboardButton(text="–°–µ—Ä–µ–±—Ä–æ", callback_data="metal_silver")]
    ]
    if with_cancel:
        kb.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_offer")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def get_notification_inline_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìà –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏", callback_data="send_quotes")],
            [InlineKeyboardButton(text="üö´ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏", callback_data="decline_quotes")]
        ]
    )

def get_org_type_inline_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ë–∞–Ω–∫ –†–§", callback_data="orgtype_–ë–∞–Ω–∫ –†–§")],
            [InlineKeyboardButton(text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤ –†–§", callback_data="orgtype_–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤ –†–§")],
            [InlineKeyboardButton(text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ï–ê–≠–°", callback_data="orgtype_–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ï–ê–≠–°")],
            [InlineKeyboardButton(text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤–Ω–µ –ï–ê–≠–°", callback_data="orgtype_–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤–Ω–µ –ï–ê–≠–°")],
        ]
    )

def get_skip_inline_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="skip_contacts")]
        ]
    )

def get_yes_no_inline_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="yes_second_metal"), InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no_second_metal")]
        ]
    )
    
def offers_today_count(user_id, metal):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –º–µ—Ç–∞–ª–ª—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    today = datetime.now().date()
    all_offers = offers_sheet.get_all_records()
    count = 0
    for row in all_offers:
        try:
            if str(row.get("ID Telegram", "")) == str(user_id) and row.get("–ú–µ—Ç–∞–ª–ª", "") == metal:
                date_str = str(row.get("–î–∞—Ç–∞", "")).strip()  # –£–∫–∞–∂–∏ —Ç–æ—á–Ω–æ, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞—Ç–æ–π!
                if date_str:
                    row_date = datetime.strptime(date_str.split()[0], "%d.%m.%Y").date()
                    if row_date == today:
                        count += 1
        except Exception:
            continue
    return count

TOKEN = "7776660810:AAE4YZm4JkZYsUdWZcngEdwz0SajINcgTas"
GOOGLE_SHEET_NAME = "–î–∞–Ω–Ω—ã–µ –∏–∑ –±–æ—Ç–∞"
CREDENTIALS_FILE = "credentials.json"
SHEET_NAME = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
chat_id = '-4787764944'
active_timers = {}
MAX_MESSAGE_AGE = timedelta(minutes=2)
NOTIFICATION_COLUMN = 7

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
gc = gspread.authorize(credentials)
users_sheet = gc.open(GOOGLE_SHEET_NAME).worksheet(SHEET_NAME)
offers_sheet = gc.open(GOOGLE_SHEET_NAME).worksheet("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ")
requests_sheet = gc.open(GOOGLE_SHEET_NAME).worksheet("–ó–∞–ø—Ä–æ—Å")
gold_sheet = gc.open(GOOGLE_SHEET_NAME).worksheet("–ó–æ–ª–æ—Ç–æ")
silver_sheet = gc.open(GOOGLE_SHEET_NAME).worksheet("–°–µ—Ä–µ–±—Ä–æ")
settings_sheet = gc.open(GOOGLE_SHEET_NAME).worksheet("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

class Form(StatesGroup):
    name = State()
    organization = State()
    org_type = State()
    contacts = State()
    offer_metal = State()
    offer_quantity = State()
    offer_quote = State()
    quote_metal = State()
    quote_value = State()
    quote_second_metal = State()
    deadline = State()
    @classmethod
    def timeout(cls):
        return timedelta(minutes=30)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

@dp.update.middleware()
async def check_message_age_middleware(handler, event, data):
    if isinstance(event, types.Message):
        message_time = event.date.replace(tzinfo=None)
        if (datetime.now() - message_time) > MAX_MESSAGE_AGE:
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.from_user.id}")
            return
    return await handler(event, data)

def get_user(user_id: int):
    records = users_sheet.get_all_records()
    for user in records:
        if str(user["ID Telegram"]) == str(user_id):
            return {
                "name": user["–ò–º—è"],
                "org": user["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"],
                "org_type": user["–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"]
            }
    return None

def is_registered(user_id: int) -> bool:
    return get_user(user_id) is not None
    
def is_offer_allowed():
    try:
        settings = settings_sheet.get_all_records()
        for row in settings:
            if row.get("–ù–∞—Å—Ç—Ä–æ–π–∫–∞", "").strip() == "–†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è":
                return row.get("–ü—Ä–∏–∑–Ω–∞–∫", "").strip().lower() == "–¥–∞"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏': {e}")
    return False

def is_working_day_and_hours():
    msk_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(msk_tz)
    today = now.date()
    # –ë—É–¥–Ω–∏–π –¥–µ–Ω—å?
    is_weekday = now.weekday() < 6  # 1-–ø–Ω, 5-–ø—Ç
    # –ù–µ –ø—Ä–∞–∑–¥–Ω–∏–∫?
    is_not_holiday = today not in RU_HOLIDAYS
    # –í—Ä–µ–º—è —Ä–∞–±–æ—á–µ–µ?
    working_time = time(9, 0) <= now.time() <= time(23, 0)
    return is_weekday and is_not_holiday and working_time   

async def check_session_expired(chat_id: int, user_id: int) -> bool:
    state = dp.fsm.resolve_context(bot, chat_id=chat_id, user_id=user_id)
    data = await state.get_data()
    if not data.get('deadline'):
        return False
    if datetime.now() > data['deadline']:
        if user_id in active_timers:
            active_timers[user_id].cancel()
            del active_timers[user_id]
        await state.clear()
        return True
    return False

async def send_timeout_notification(user_id: int, deadline: datetime):
    user_data = get_user(user_id)
    try:
        now = datetime.now()
        wait_seconds = (deadline - now).total_seconds()
        if wait_seconds > 0:
            await asyncio.sleep(wait_seconds)
        if user_id not in active_timers:
            return
        state = dp.fsm.resolve_context(bot, chat_id=user_id, user_id=user_id)
        data = await state.get_data()
        if data.get('deadline') == deadline and not data.get('timeout'):
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∫–æ—Ç–∏—Ä–æ–≤–∫—É –ø–æ –ø–µ—Ä–≤–æ–º—É –º–µ—Ç–∞–ª–ª—É
            if 'quote_value' not in data:
                gold_sheet.append_row([user_id, user_data["name"], user_data["org"], user_data["org_type"], timestamp, "–í—Ä–µ–º—è –≤—ã—à–ª–æ"])
                silver_sheet.append_row([user_id, user_data["name"], user_data["org"], user_data["org_type"], timestamp, "–í—Ä–µ–º—è –≤—ã—à–ª–æ"])
                log_event("QUOTE", user_data, "–í—Ä–µ–º—è –≤—ã—à–ª–æ | –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∫–æ—Ç–∏—Ä–æ–≤–∫—É –ø–æ –ø–µ—Ä–≤–æ–º—É –º–µ—Ç–∞–ª–ª—É, –Ω–æ –Ω–µ –ø–æ –≤—Ç–æ—Ä–æ–º—É
            elif 'quote_value' in data and 'second_metal' in data:
                second_metal = data['second_metal']
                sheet = gold_sheet if second_metal == "–ó–æ–ª–æ—Ç–æ" else silver_sheet
                sheet.append_row([user_id, user_data["name"], user_data["org"], user_data["org_type"], timestamp, "–í—Ä–µ–º—è –≤—ã—à–ª–æ"])
                log_event("QUOTE", user_data, f"–í—Ä–µ–º—è –≤—ã—à–ª–æ | –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è {second_metal}")
            elif 'quote_value' in data and 'second_metal' not in data:
                second_metal = "–°–µ—Ä–µ–±—Ä–æ" if data['metal'] == "–ó–æ–ª–æ—Ç–æ" else "–ó–æ–ª–æ—Ç–æ"
                sheet = gold_sheet if second_metal == "–ó–æ–ª–æ—Ç–æ" else silver_sheet
                sheet.append_row([user_id, user_data["name"], user_data["org"], user_data["org_type"], timestamp, "–í—Ä–µ–º—è –≤—ã—à–ª–æ"])
                log_event("QUOTE", user_data, f"–í—Ä–µ–º—è –≤—ã—à–ª–æ | –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è {data['metal']}")
            await state.update_data(timeout=True)
            try:
                last_msg_id = data.get("last_inline_msg_id")
                if last_msg_id:
                    await bot.edit_message_reply_markup(chat_id=user_id, message_id=last_msg_id, reply_markup=None)
            except Exception:
                pass
            await bot.send_message(
                chat_id=user_id,
                text="‚åõ –í—Ä–µ–º—è –≤—ã—à–ª–æ!"
            )
            await clear_state_safely(user_id, state)
    except asyncio.CancelledError:
        log_event("QUOTE", user_data, "–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
    except Exception as e:
        log_event("ERROR", None, f"–û—à–∏–±–∫–∞ –≤ send_timeout_notification: {e}")
    finally:
        if user_id in active_timers:
            del active_timers[user_id]

def record_decline(user_id: int):
    user_data = get_user(user_id)
    if not user_data:
        return False
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    gold_sheet.append_row([
        user_id,
        user_data["name"],
        user_data["org"],
        user_data["org_type"],
        timestamp,
        "–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"
    ])
    silver_sheet.append_row([
        user_id,
        user_data["name"],
        user_data["org"],
        user_data["org_type"],
        timestamp,
        "–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"
    ])
    return True

async def clear_state_safely(user_id: int, state: FSMContext):
    try:
        if user_id in active_timers:
            active_timers[user_id].cancel()
            del active_timers[user_id]
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {user_id}: {e}")
        raise

def validate_name(text: str) -> tuple[bool, str]:
    text = text.strip()
    if len(text) < 3 or len(text) > 25:
        return False, "–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤"
    if not re.fullmatch(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s-]+$', text):
        return False, "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å"
    return True, ""

def validate_org(text: str) -> tuple[bool, str]:
    text = text.strip()
    if len(text) < 3 or len(text) > 25:
        return False, "–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤"
    if not re.fullmatch(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9\s\.,!?:;\-\'"]+$', text):
        return False, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏"
    return True, ""

def validate_contacts(text: str) -> tuple[bool, str]:
    if text == "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å":
        return True, ""
    text = text.strip()
    if len(text) < 3 or len(text) > 25:
        return False, "–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤"
    return True, ""

def validate_quote(text: str) -> tuple[bool, str]:
    try:
        quote = float(text.replace(",", "."))
        if not -100 <= quote <= 100:
            return False, "–ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É -100 –∏ 100"
        return True, ""
    except ValueError:
        return False, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,5 –∏–ª–∏ -0,5)"

async def send_scheduled_notifications():
    try:
        msk_timezone = pytz.timezone('Europe/Moscow')
        now = datetime.now(msk_timezone)
        current_time = now.strftime("%H:%M")
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ {now.strftime('%H:%M:%S')}")
        try:
            times = []
            for record in requests_sheet.get_all_records():
                send_time_str = record.get("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –ú–°–ö")
                if send_time_str:
                    try:
                        send_time = datetime.strptime(send_time_str.strip(), "%H:%M").replace(
                            year=now.year, month=now.month, day=now.day, tzinfo=msk_timezone)
                        if send_time > now:
                            times.append(send_time)
                    except ValueError:
                        continue
            if times:
                nearest = min(times)
                delta = nearest - now
                logger.info(f"–ë–ª–∏–∂–∞–π—à–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {nearest.strftime('%H:%M:%S')}")
            else:
                logger.info("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
        records = requests_sheet.get_all_records()
        for record in records:
            if not record.get("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –ú–°–ö"):
                continue
            if record["–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –ú–°–ö"].strip() == current_time:
                notification_type = record.get("–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "").strip().lower()
                users_data = users_sheet.get_all_values()
                header = users_data[0]
                try:
                    user_id_index = header.index("ID Telegram")
                    notify_index = header.index("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                except ValueError as e:
                    log_event("ERROR", None, f"–°—Ç–æ–ª–±–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö: {header}")
                    continue
                users_to_notify = [
                    row[user_id_index] for row in users_data[1:]
                    if len(row) > notify_index and row[notify_index].strip().capitalize() == "–î–∞"
                ]
                for user_id in users_to_notify:
                    try:
                        user_id = int(user_id)
                        # === –¢–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ===
                        if notification_type == "—Ç–µ–∫—Å—Ç":
                            await bot.send_message(
                                chat_id=user_id,
                                text=record['–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞'].strip()
                            )
                            user_data = get_user(user_id)
                            if user_data:
                                log_event("NOTIFY", user_data,
                                          f"–¢–µ–∫—Å—Ç: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                            continue
                        # === –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ ===
                        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞:
                        response_time_str = str(record.get("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", "")).strip()
                        if response_time_str.isdigit():
                            response_time = int(response_time_str)
                        else:
                            response_time = 15  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        state = dp.fsm.resolve_context(bot, chat_id=user_id, user_id=user_id)
                        if user_id in active_timers:
                            active_timers[user_id].cancel()
                        deadline = datetime.now() + timedelta(minutes=response_time)
                        await state.update_data(
                            notification_time=datetime.now(),
                            deadline=deadline
                        )
                        task = asyncio.create_task(
                            send_timeout_notification(user_id, deadline)
                        )
                        active_timers[user_id] = task
                        user_data = get_user(user_id)
                        if user_data:
                            log_event("NOTIFY", user_data,
                                      f"–¢–µ–∫—Å—Ç: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ | –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time} –º–∏–Ω")
                        await bot.send_message(
                            chat_id=user_id,
                            text=f"{record['–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞'].strip()}\n\n‚è± –ù–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –¥–∞—ë—Ç—Å—è {response_time} –º–∏–Ω—É—Ç",
                            reply_markup=get_notification_inline_kb()
                        )
                    except Exception as e:
                        log_event("ERROR", None, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ user_id={user_id}: {e}")
    except Exception as e:
        log_event("ERROR", None, f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    offers_allowed = is_offer_allowed()
    if is_registered(message.from_user.id):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_inline_kb(offers_allowed=offers_allowed))
    else:
        await message.answer(
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:",
            reply_markup=get_reg_inline_kb()
        )

@dp.message(Command("send_offer"))
async def send_offer_command(message: types.Message, state: FSMContext):
    if not is_offer_allowed():
        await message.answer("–ü–æ–¥–∞—á–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    # --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º ---
    if not is_working_day_and_hours():
        await message.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ü–Ω‚Äì–ü—Ç, –∫—Ä–æ–º–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤) –∏ —Å 09:00 –¥–æ 18:00 –ø–æ –ú–æ—Å–∫–≤–µ.")
        await state.clear()
        return
    # --- –∫–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
    if is_registered(message.from_user.id):
        await state.set_state(Form.offer_metal)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–µ—Ç–∞–ª–ª:",
            reply_markup=get_metals_inline_kb()
        )
    else:
        await message.answer(
            "–î–ª—è –ø–æ–¥–∞—á–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=get_reg_inline_kb()
        )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "–ü–æ –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –û—Ç–¥–µ–ª —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 812 334-36-64."
    )

@dp.callback_query(F.data == "help_menu")
async def help_menu_callback(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "–ü–æ –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –û—Ç–¥–µ–ª —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 812 334-36-64."
    )

@dp.callback_query(F.data == "registration")
async def callback_registration(callback: types.CallbackQuery, state: FSMContext):
    if is_registered(callback.from_user.id):
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.set_state(Form.name)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å, 3-25 —Å–∏–º–≤–æ–ª–æ–≤):"
    )

@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    is_valid, error_msg = validate_name(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    await state.update_data(name=message.text.strip())
    await state.set_state(Form.organization)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (3-25 —Å–∏–º–≤–æ–ª–æ–≤, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è):"
    )

@dp.message(Form.organization)
async def process_org(message: types.Message, state: FSMContext):
    is_valid, error_msg = validate_org(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    await state.update_data(organization=message.text.strip())
    await state.set_state(Form.org_type)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –í–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:",
        reply_markup=get_org_type_inline_kb()
    )

@dp.callback_query(lambda call: call.data.startswith("orgtype_"))
async def process_org_type_cb(callback: types.CallbackQuery, state: FSMContext):
    org_type = callback.data[len("orgtype_") :]
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.update_data(org_type=org_type)
    await state.set_state(Form.contacts)
    await callback.message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω/–ø–æ—á—Ç–∞) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å¬ª:",
        reply_markup=get_skip_inline_kb()
    )

@dp.callback_query(F.data == "skip_contacts")
async def skip_contacts_cb(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    data = await state.get_data()
    users_sheet.append_row([
        datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
        callback.from_user.id,
        data['name'],
        data['organization'],
        "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        data['org_type'],
        "–î–∞"
    ])
    user_data = {
        "name": data['name'],
        "org": data['organization'],
        "org_type": data['org_type']
    }
    log_event("REGISTER", user_data, "–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await clear_state_safely(callback.from_user.id, state)
    await callback.message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –æ –ø–æ–∫—É–ø–∫–µ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤.")

@dp.message(Form.contacts)
async def process_contacts(message: types.Message, state: FSMContext):
    is_valid, error_msg = validate_contacts(message.text)
    if not is_valid:
        await message.answer(
            f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å¬ª:",
            reply_markup=get_skip_inline_kb()
        )
        return
    data = await state.get_data()
    users_sheet.append_row([
        datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
        message.from_user.id,
        data['name'],
        data['organization'],
        message.text.strip(),
        data['org_type'],
        "–î–∞"
    ])
    user_data = {
        "name": data['name'],
        "org": data['organization'],
        "org_type": data['org_type']
    }
    log_event("REGISTER", user_data, "–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await clear_state_safely(message.from_user.id, state)
    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –æ –ø–æ–∫—É–ø–∫–µ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤.")

# --- –ü–æ–¥–∞—á–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ ---
@dp.callback_query(Form.offer_metal, lambda call: call.data in ["metal_gold", "metal_silver"])
async def process_offer_metal_cb(callback: types.CallbackQuery, state: FSMContext):
    if not is_working_day_and_hours():
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ü–Ω‚Äì–ü—Ç, –∫—Ä–æ–º–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤) –∏ —Å 09:00 –¥–æ 18:00 –ø–æ –ú–æ—Å–∫–≤–µ.")
        await state.clear()
        return
    metal = "–ó–æ–ª–æ—Ç–æ" if callback.data == "metal_gold" else "–°–µ—Ä–µ–±—Ä–æ"
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ ---
    user_id = callback.from_user.id
    count = offers_today_count(user_id, metal)
    if count >= 2:
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(
            f"‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –º–µ—Ç–∞–ª–ª—É {metal} —Å–µ–≥–æ–¥–Ω—è. –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞."
        )
        await state.clear()
        return
    # --- /–∫–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.update_data(metal=metal)
    await state.set_state(Form.offer_quantity)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–∞—Å—Å—É –ø–∞—Ä—Ç–∏–∏ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>100</code>):",
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "start_offer")
async def callback_start_offer(callback: types.CallbackQuery, state: FSMContext):
    if not is_offer_allowed():
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("–ü–æ–¥–∞—á–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    # --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ---
    if not is_working_day_and_hours():
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ü–Ω‚Äì–ü—Ç, –∫—Ä–æ–º–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤) –∏ —Å 09:00 –¥–æ 18:00 –ø–æ –ú–æ—Å–∫–≤–µ.")
        await state.clear()
        return
    # --- –∫–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
    if not is_registered(callback.from_user.id):
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=get_reg_inline_kb())
        return
    user_data = get_user(callback.from_user.id)
    if not user_data:
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.set_state(Form.offer_metal)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–µ—Ç–∞–ª–ª:",
        reply_markup=get_metals_inline_kb()
    )

@dp.callback_query(F.data == "cancel_offer")
async def cancel_offer_cb(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await clear_state_safely(callback.from_user.id, state)
    await callback.message.answer(
        "‚ùå –û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –•–æ—Ä–æ—à–µ–≥–æ –í–∞–º –¥–Ω—è"
    )

@dp.message(Form.offer_quantity)
async def process_offer_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>100</code>",
            parse_mode="HTML"
        )
        return
    if quantity < 10 or quantity > 10000:
        await message.answer(
            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 10 –∏ –Ω–µ –±–æ–ª—å—à–µ 10 000 –∫–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            parse_mode="HTML"
        )
        return

    await state.update_data(quantity=quantity)
    await state.set_state(Form.offer_quote)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ç–∏—Ä–æ–≤–∫—É –≤ % (–≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–º–∏–∏ —á–∏—Å–ª–æ –±–µ–∑ –∑–Ω–∞–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1.5</code> , –∞ –≤ —Å–ª—É—á–∞–µ –¥–∏—Å–∫–æ–Ω—Ç–∞ —Å –º–∏–Ω—É—Å–æ–º <code>-0.5</code>):",
        parse_mode="HTML"
    )

@dp.message(Form.offer_quote)
async def process_offer_quote(message: types.Message, state: FSMContext):
    is_valid, error_msg = validate_quote(message.text)
    if not is_valid:
        await message.answer(
            f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    quote = float(message.text.replace(",", "."))
    data = await state.get_data()
    user_data = get_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        await state.clear()
        return
    today = datetime.now().date()
    metal = data['metal']  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–∞–ª–ª –∏–∑ state!
    all_offers = offers_sheet.get_all_records()
    user_offers_today = []
    for row in all_offers:
        try:
            if (
                str(row.get("ID Telegram", "")) == str(message.from_user.id)
                and str(row.get("–ú–µ—Ç–∞–ª–ª", "")) == metal  # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Ç–∞–ª–ª—É
            ):
                date_str = str(row.get("–î–∞—Ç–∞", "")).strip()  # –∏–ª–∏ "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"
                if date_str:
                    row_date = datetime.strptime(date_str.split()[0], "%d.%m.%Y").date()
                    if row_date == today:
                        user_offers_today.append(row)
        except Exception:
            continue
    if len(user_offers_today) >= 2:
        await message.answer(f"‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –º–µ—Ç–∞–ª–ª—É {metal} —Å–µ–≥–æ–¥–Ω—è. –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞.")
        await state.clear()
        return

    records = users_sheet.get_all_records()
    contacts = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    for user in records:
        if str(user["ID Telegram"]) == str(message.from_user.id):
            contacts = user.get("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–ù–µ —É–∫–∞–∑–∞–Ω—ã")
            break
    offers_sheet.append_row([
        message.from_user.id,
        user_data["name"],
        user_data["org"],
        user_data["org_type"],
        datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
        data['metal'],
        data['quantity'],
        quote
    ])
    log_event("OFFER", user_data, 
              f"–ú–µ—Ç–∞–ª–ª: {data['metal']} | –ú–∞—Å—Å–∞: {data['quantity']}–∫–≥ | –ö–æ—Ç–∏—Ä–æ–≤–∫–∞: {quote}%")
    await state.clear()
    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ:\n"
        f"‚Ä¢ –ú–µ—Ç–∞–ª–ª: {data['metal']}\n"
        f"‚Ä¢ –ú–∞—Å—Å–∞: {data['quantity']} –∫–≥\n"
        f"‚Ä¢ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞: {quote}%"
    )
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=f"üì® –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ:\n"
                 f"‚Ä¢ –û—Ç: {user_data['org']} ({user_data['name']})\n"
                 f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts}\n"
                 f"‚Ä¢ –ú–µ—Ç–∞–ª–ª: {data['metal']}\n"
                 f"‚Ä¢ –ú–∞—Å—Å–∞: {data['quantity']} –∫–≥\n"
                 f"‚Ä¢ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞: {quote}%",
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

# --- –û—Ç–≤–µ—Ç –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∫–æ—Ç–∏—Ä–æ–≤–∫–∏), —Ç–æ–ª—å–∫–æ gold/silver, –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É! ---
@dp.callback_query(Form.quote_metal, lambda call: call.data in ["metal_gold", "metal_silver"])
async def process_quote_metal_cb(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data.get("timeout"):
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚åõ –í—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤—ã—à–ª–æ!")
        return
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.update_data(last_inline_msg_id=callback.message.message_id)
    metal = "–ó–æ–ª–æ—Ç–æ" if callback.data == "metal_gold" else "–°–µ—Ä–µ–±—Ä–æ"
    await state.update_data(metal=metal)
    await state.set_state(Form.quote_value)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ç–∏—Ä–æ–≤–∫—É –≤ % (–≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–º–∏–∏ —á–∏—Å–ª–æ –±–µ–∑ –∑–Ω–∞–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, <code>1.5</code>, –∞ –≤ —Å–ª—É—á–∞–µ –¥–∏—Å–∫–æ–Ω—Ç–∞ —Å –º–∏–Ω—É—Å–æ–º <code>-0.5</code>):",
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "send_quotes")
async def callback_send_quotes(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data.get("timeout"):
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚åõ –í—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤—ã—à–ª–æ!")
        return
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.update_data(last_inline_msg_id=callback.message.message_id)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–≤—ã–π –º–µ—Ç–∞–ª–ª –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫. –ö–æ—Ç–∏—Ä–æ–≤–∫—É –ø–æ –≤—Ç–æ—Ä–æ–º—É –º–µ—Ç–∞–ª–ª—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.",
        reply_markup=get_metals_inline_kb(with_cancel=False)
    )
    await state.set_state(Form.quote_metal)

@dp.callback_query(F.data == "decline_quotes")
async def callback_decline_quotes(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data.get("timeout"):
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚åõ –í—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤—ã—à–ª–æ!")
        return
    if callback.from_user.id in active_timers:
        active_timers[callback.from_user.id].cancel()
        del active_timers[callback.from_user.id]
    if not record_decline(callback.from_user.id):
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        return
    await callback.message.edit_reply_markup(reply_markup=None)
    await clear_state_safely(callback.from_user.id, state)
    await callback.message.answer(
        "–û—á–µ–Ω—å –∂–∞–ª—å! –ñ–µ–ª–∞–µ–º –í–∞–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
    )

@dp.message(Form.quote_value)
async def process_quote_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data.get("timeout"):
        await message.answer("‚åõ –í—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤—ã—à–ª–æ!")
        return
    await state.update_data(last_inline_msg_id=message.message_id)
    is_valid, error_msg = validate_quote(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    quote = float(message.text.replace(",", "."))
    user_data = get_user(message.from_user.id)
    current_metal = data['metal']
    if user_data:
        log_event("QUOTE", user_data, f"–ú–µ—Ç–∞–ª–ª: {current_metal} | {quote}%")
    sheet = gold_sheet if current_metal == "–ó–æ–ª–æ—Ç–æ" else silver_sheet
    sheet.append_row([
        message.from_user.id,
        user_data["name"],
        user_data["org"],
        user_data["org_type"],
        datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
        quote
    ])
    await state.update_data(quote_value=quote)
    if 'second_metal' not in data:
        second_metal = "–°–µ—Ä–µ–±—Ä–æ" if current_metal == "–ó–æ–ª–æ—Ç–æ" else "–ó–æ–ª–æ—Ç–æ"
        await state.update_data(second_metal=second_metal)
        msg = await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ, –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ {current_metal} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
            f"–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É –Ω–∞ {second_metal}?",
            reply_markup=get_yes_no_inline_kb()
        )
        await state.update_data(last_inline_msg_id=msg.message_id)
        await state.set_state(Form.quote_second_metal)
    else:
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –û–±–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –•–æ—Ä–æ—à–µ–≥–æ –í–∞–º –¥–Ω—è!")
        await clear_state_safely(message.from_user.id, state)

@dp.callback_query(F.data == "yes_second_metal")
async def yes_second_metal_cb(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data.get("timeout"):
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚åõ –í—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤—ã—à–ª–æ!")
        return
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.update_data(last_inline_msg_id=callback.message.message_id)
    second_metal = data.get('second_metal')
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è {second_metal} –≤ %:",
        parse_mode="HTML"
    )
    await state.update_data(metal=second_metal)
    await state.set_state(Form.quote_value)

@dp.callback_query(F.data == "no_second_metal")
async def no_second_metal_cb(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data.get("timeout"):
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚åõ –í—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤—ã—à–ª–æ!")
        return
    await callback.message.edit_reply_markup(reply_markup=None)
    second_metal = data.get('second_metal')
    user_data = get_user(callback.from_user.id)
    if user_data:
        log_event("QUOTE", user_data, f"–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è {second_metal}")
    sheet = gold_sheet if second_metal == "–ó–æ–ª–æ—Ç–æ" else silver_sheet
    sheet.append_row([
        callback.from_user.id,
        user_data["name"],
        user_data["org"],
        user_data["org_type"],
        datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
        "–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"
    ])
    await callback.message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É! –ñ–µ–ª–∞–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
    )
    await clear_state_safely(callback.from_user.id, state)

async def on_startup(bot: Bot):
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω, —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ")
    if not os.path.exists("bot.log"):
        with open("bot.log", "w") as f:
            f.write("")
    try:
        test_data = users_sheet.get_all_records()
        log_event("SYSTEM", None, f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(test_data)}")
    except Exception as e:
        log_event("ERROR", None, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets: {e}")
        return
    log_event("SYSTEM", None, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

async def health_check():
    while True:
        logger.info("–ë–æ—Ç –∂–∏–≤‚Ä¶")
        await asyncio.sleep(5 * 60)

async def main():
    await on_startup(bot)
    asyncio.create_task(health_check())
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(
        send_scheduled_notifications,
        trigger=CronTrigger(minute="*"),
    )
    scheduler.start()
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())